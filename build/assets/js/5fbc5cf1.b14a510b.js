"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[207],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7480:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},c="API",l={unversionedId:"api",id:"api",title:"API",description:"The API component provides models to describe an API specification. You can create those models either by parsing an",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",editUrl:"https://github.com/apioo/psx-website/edit/main/docs/api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Schema",permalink:"/docs/schema"}},p=[{value:"Usage",id:"usage",children:[{value:"Framework",id:"framework",children:[],level:3},{value:"Standalone",id:"standalone",children:[],level:3}],level:2},{value:"Generator",id:"generator",children:[{value:"Client",id:"client",children:[],level:3},{value:"Markup",id:"markup",children:[],level:3},{value:"Spec",id:"spec",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api"},"API"),(0,o.kt)("p",null,"The API component provides models to describe an API specification. You can create those models either by parsing an\nOpenAPI specification or by using PHP Attributes. Based on those models it is then possible to generate i.e. an OpenAPI\nspecification or client SDKs."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The root model object is called a ",(0,o.kt)("inlineCode",{parentName:"p"},"Specification")," which then contains ",(0,o.kt)("inlineCode",{parentName:"p"},"Resources")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Definitions"),". The resources\ncontain all available metadata of your endpoints and the definitions represent the available schemas."),(0,o.kt)("h3",{id:"framework"},"Framework"),(0,o.kt)("p",null,"If you want to integrate this library into your framework you can implement a ",(0,o.kt)("inlineCode",{parentName:"p"},"ListingInterface"),". A listing basically\nknows every API endpoint of your framework and returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"SpecificationInterface"),". The listing is then also used at\nour commands to generate an OpenAPI specification or the client SDK."),(0,o.kt)("p",null,"You can use PHP attributes to describe the structure of your endpoints. The parser looks at the provided class and\nbuilds a specification based on the provided attributes. Most likely you want to add those attributes to your controller\nclass. A controller class could then look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nclass MyController\n{\n    #[Get]\n    #[Path('/my/endpoint')]\n    #[QueryParam(name='foo', type='integer')]\n    #[Outgoing(code=200, schema=\\My\\Response\\Model::class)]\n    public function getModel()\n    {\n        // @TODO implement\n    }\n    \n    #[Post]\n    #[Path('/my/endpoint')]\n    #[Incoming(schema=\\My\\Request\\Model::class)]\n    #[Outgoing(code=200, schema=\\My\\Response\\Model::class)]\n    public function insertModel(\\My\\Request\\Model $model)\n    {\n        // @TODO implement\n    }\n}\n\n")),(0,o.kt)("p",null,"This would be then enough for the API component to generate either an OpenAPI specification or a client SDK.\nNote this library only needs the meta information, if you can get those meta information at your framework in another\nway you can also implement a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"ParserInterface"),"."),(0,o.kt)("h3",{id:"standalone"},"Standalone"),(0,o.kt)("p",null,"Beside the framework integration you can use this component also to simply parse existing OpenAPI specifications and\ngenerate specific output. The following is a simple example how to use the PHP API and how to generate code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// reads the OpenAPI specification and generates a resource object which was defined under the path /foo\n$specification = \\PSX\\Api\\Parser\\OpenAPI::fromFile('openapi.json');\n\n// contains all schema type definitions\n$definitions = $specification->getDefinitions();\n\n// returns the resource foo from the specification\n$resource = $specification->get('/foo');\n\n// returns path parameters type as string\n$resource->getPathParameters();\n\n// you can get the actual schema type from the definitions\n$pathType = $definitions->getType($resource->getPathParameters());\n\n// checks whether a specific request method is supported\n$resource->hasMethod('POST');\n\n// returns all allowed methods\n$resource->getAllowedMethods();\n\n// returns the available query parameters type as string\n$resource->getMethod('POST')->getQueryParameters();\n\n// you can get the actual schema type from the definitions\n$queryType = $definitions->getType($resource->getMethod('POST')->getQueryParameters());\n\n// checks whether the method has a request\n$resource->getMethod('POST')->hasRequest();\n\n// returns the request type as string\n$resource->getMethod('POST')->getRequest();\n\n// you can get the actual schema type from the definitions\n$requestType = $definitions->getType($resource->getMethod('POST')->getRequest());\n\n// checks whether the method has a response with the status code 201\n$resource->getMethod('POST')->hasResponse(201);\n\n// returns the response type as string\n$resource->getMethod('POST')->getResponse(201);\n\n// you can get the actual schema type from the definitions\n$responseType = $definitions->getType($resource->getMethod('POST')->getResponse(201));\n\n// creates a PHP client which consumes the defined /foo resource\n$generator = new \\PSX\\Api\\Generator\\Client\\Php();\n\n$source = $generator->generate($resource);\n\n")),(0,o.kt)("h2",{id:"generator"},"Generator"),(0,o.kt)("h3",{id:"client"},"Client"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"PHP (stable)"),(0,o.kt)("li",{parentName:"ul"},"Typescript (stable)"),(0,o.kt)("li",{parentName:"ul"},"Go (in development)"),(0,o.kt)("li",{parentName:"ul"},"Java (in development)")),(0,o.kt)("h3",{id:"markup"},"Markup"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"HTML"),(0,o.kt)("li",{parentName:"ul"},"Markdown")),(0,o.kt)("h3",{id:"spec"},"Spec"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OpenAPI (Generates a ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md"},"OpenAPI 3.0")," specification)"),(0,o.kt)("li",{parentName:"ul"},"RAML (Generates a ",(0,o.kt)("a",{parentName:"li",href:"http://raml.org/"},"RAML 1.0")," specification)"),(0,o.kt)("li",{parentName:"ul"},"TypeSchema (Generates a ",(0,o.kt)("a",{parentName:"li",href:"https://typeschema.org/"},"TypeSchema")," specification)")))}d.isMDXComponent=!0}}]);