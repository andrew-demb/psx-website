"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[285],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=s(n),d=r,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||l;return n?a.createElement(g,i(i({ref:e},m),{},{components:n})):a.createElement(g,i({ref:e},m))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6620:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:3},p="Schema",s={unversionedId:"schema",id:"schema",title:"Schema",description:"This library can parse a TypeSchema specification either from a JSON file or from PHP",source:"@site/docs/schema.md",sourceDirName:".",slug:"/schema",permalink:"/docs/schema",editUrl:"https://github.com/apioo/psx-website/edit/main/docs/schema.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/docs/api"},next:{title:"Data",permalink:"/docs/data"}},m=[{value:"Usage",id:"usage",children:[],level:2},{value:"Generator",id:"generator",children:[],level:2},{value:"Attributes",id:"attributes",children:[],level:2}],u={toc:m};function c(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"schema"},"Schema"),(0,l.kt)("p",null,"This library can parse a ",(0,l.kt)("a",{parentName:"p",href:"https://typeschema.org/"},"TypeSchema")," specification either from a JSON file or from PHP\nclasses using reflection and attributes. Based on this schema it can generate source code and transform raw JSON data\ninto DTO objects. Through this you can work with fully typed objects in your API for incoming and outgoing data. It\nprovides basically the following features:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Transform raw JSON data into DTO objects"),(0,l.kt)("li",{parentName:"ul"},"Generate source code based on a schema (i.e. PHP, Typescript)"),(0,l.kt)("li",{parentName:"ul"},"Validate data according to the provided schema")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"At first, we need to describe our data format with a ",(0,l.kt)("a",{parentName:"p",href:"https://typeschema.org/"},"TypeSchema")," specification. Then we can\ngenerate based on this specification the fitting PHP classes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "definitions": {\n    "Person": {\n      "type": "object",\n      "properties": {\n        "firstName": {\n          "type": "string"\n        },\n        "lastName": {\n          "type": "string"\n        },\n        "age": {\n          "description": "Age in years",\n          "type": "integer",\n          "minimum": 0\n        }\n      },\n      "required": [\n        "firstName",\n        "lastName"\n      ]\n    }\n  },\n  "$ref": "Person"\n}\n')),(0,l.kt)("p",null,"To generate the PHP classes we use the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vendor/bin/schema schema:parse --format=php schema.json\n")),(0,l.kt)("p",null,"Note you can also skip this step and directly write the PHP class by your self. The advantage of starting with a JSON\nrepresentation is that you have defined your models in a neutral format so that you can generate the models for\ndifferent environments i.e. also for the frontend using the TypeScript generator. The command generates the following\nsource code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\ndeclare(strict_types = 1);\n\n#[Required([\"firstName\", \"lastName\"])]\nclass Person implements \\JsonSerializable\n{\n    protected ?string $firstName = null;\n    protected ?string $lastName = null;\n    #[Description(\"Age in years\")]\n    #[Minimum(0)]\n    protected ?int $age = null;\n    public function setFirstName(?string $firstName) : void\n    {\n        $this->firstName = $firstName;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setLastName(?string $lastName) : void\n    {\n        $this->lastName = $lastName;\n    }\n    public function getLastName() : ?string\n    {\n        return $this->lastName;\n    }\n    public function setAge(?int $age) : void\n    {\n        $this->age = $age;\n    }\n    public function getAge() : ?int\n    {\n        return $this->age;\n    }\n    public function jsonSerialize()\n    {\n        return (object) array_filter(array('firstName' => $this->firstName, 'lastName' => $this->lastName, 'age' => $this->age), static function ($value) : bool {\n            return $value !== null;\n        });\n    }\n}\n")),(0,l.kt)("p",null,"Now we can parse raw JSON data and fill this in to our object model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'// the data which we want to import\n$data = json_decode(\'{"firstName": "foo", "lastName": "bar"}\');\n\n$schemaManager = new SchemaManager();\n\n// we read the schema from the class\n$schema = $schemaManager->getSchema(Person::class);\n\ntry {\n    $person = (new SchemaTraverser())->traverse($data, $schema, new TypeVisitor());\n    \n    // $example contains now an instance of the Person class containing \n    // the firstName and lastName property\n    echo $person->getFirstName();\n\n} catch (\\PSX\\Schema\\Exception\\ValidationException $e) {\n    // the validation failed\n    echo $e->getMessage();\n}\n\n')),(0,l.kt)("p",null,"Every generated PHP class implements also the ",(0,l.kt)("inlineCode",{parentName:"p"},"JsonSerializable")," interface so you can simply encode an object to json."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'$schema = new Person();\n$schema->setFirstName(\'foo\');\n$schema->setLastName(\'bar\');\n$schema->setAge(12);\n\necho json_encode($schema);\n\n// would result in\n// {"firstName": "foo", "lastName": "bar", "age": 12}\n\n')),(0,l.kt)("h2",{id:"generator"},"Generator"),(0,l.kt)("p",null,"Beside PHP classes this library can generate the following types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CSharp"),(0,l.kt)("li",{parentName:"ul"},"Go"),(0,l.kt)("li",{parentName:"ul"},"HTML"),(0,l.kt)("li",{parentName:"ul"},"Java"),(0,l.kt)("li",{parentName:"ul"},"JsonSchema"),(0,l.kt)("li",{parentName:"ul"},"Markdown"),(0,l.kt)("li",{parentName:"ul"},"PHP"),(0,l.kt)("li",{parentName:"ul"},"Protobuf"),(0,l.kt)("li",{parentName:"ul"},"Python"),(0,l.kt)("li",{parentName:"ul"},"Swift"),(0,l.kt)("li",{parentName:"ul"},"TypeSchema"),(0,l.kt)("li",{parentName:"ul"},"TypeScript")),(0,l.kt)("h2",{id:"attributes"},"Attributes"),(0,l.kt)("p",null,"The following attributes are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,l.kt)("th",{parentName:"tr",align:null},"Target"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Deprecated"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[Deprecated(true)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Description"),(0,l.kt)("td",{parentName:"tr",align:null},"Class/Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Description("content")]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Discriminator"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Discriminator("type")]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Enum"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Enum({"foo", "bar"})]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Exclude"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[Exclude]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ExclusiveMaximum"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[ExclusiveMaximum(true)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ExclusiveMinimum"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[ExclusiveMinimum(true)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Format"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Format("uri")]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Key"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Key("$ref")]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Maximum"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[Maximum(16)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MaxItems"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MaxItems(16)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MaxLength"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MaxLength(16)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MaxProperties"),(0,l.kt)("td",{parentName:"tr",align:null},"Class"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MaxProperties(16)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Minimum"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[Minimum(4)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MinItems"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MinItems(4)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MinLength"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MinLength(4)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MinProperties"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MinProperties(4)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MultipleOf"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[MultipleOf(2)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Nullable"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[Nullable(true)]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pattern"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Pattern("A-z+")]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Required"),(0,l.kt)("td",{parentName:"tr",align:null},"Class"),(0,l.kt)("td",{parentName:"tr",align:null},"#[Required(",'["name", "title"]',")]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Title"),(0,l.kt)("td",{parentName:"tr",align:null},"Class"),(0,l.kt)("td",{parentName:"tr",align:null},"#",'[Title("foo")]')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UniqueItems"),(0,l.kt)("td",{parentName:"tr",align:null},"Property"),(0,l.kt)("td",{parentName:"tr",align:null},"#","[UniqueItems(true)]")))))}c.isMDXComponent=!0}}]);