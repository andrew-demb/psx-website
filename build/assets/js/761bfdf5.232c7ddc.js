"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[135],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8051:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},l="Data",c={unversionedId:"data",id:"data",title:"Data",description:"Data processing library which helps to read and write data to and from POPOs",source:"@site/docs/data.md",sourceDirName:".",slug:"/data",permalink:"/docs/data",editUrl:"https://github.com/apioo/psx-website/edit/main/docs/data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Schema",permalink:"/docs/schema"},next:{title:"Integration",permalink:"/docs/integration"}},d=[{value:"Usage",id:"usage",children:[],level:2},{value:"Formats",id:"formats",children:[],level:2},{value:"Constraints",id:"constraints",children:[],level:2},{value:"Transformations",id:"transformations",children:[],level:2},{value:"Exporter",id:"exporter",children:[],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"data"},"Data"),(0,o.kt)("p",null,"Data processing library which helps to read and write data to and from POPOs\nin different formats."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The following example showcases how you could read/write a complex model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'// create processor\n$processor = new Processor(Configuration::createDefault());\n\n// example json data which we want to parse in our model\n$in = <<<JSON\n{\n    "id": 1,\n    "title": "Lorem ipsum",\n    "author": {\n        "id": 1,\n        "name": "Foo",\n        "email": "foo@bar.com",\n    },\n    "comments": [{\n        "id": 1,\n        "author": {\n            "id": 1,\n            "name": "Foo",\n            "email": "foo@bar.com",\n        },\n        "text": "Lorem ipsum"\n    },{\n        "id": 2,\n        "author": {\n            "id": 1,\n            "name": "Foo",\n            "email": "foo@bar.com",\n        },\n        "text": "Lorem ipsum"\n    }],\n    "date": "2016-03-28T22:40:00Z"\n}\nJSON;\n\n// reads the json data into a custom model class\n$model = $processor->read(News::class, Payload::json($in));\n\n// the model can be used to get or set data\n$model->getAuthor()->getName();\n$model->getComments()[0]->getText();\n\n// writes the model back to json\n$out = $processor->write(Payload::json($model));\n\n// model classes\nclass News\n{\n    private ?int $id = null;\n    private ?string $title = null;\n    protected ?Author $author = null;\n    /**\n     * @var array<Comment>|null\n     */\n    private ?array $comments = null;\n     #[Format(\'date-time\')]\n    private ?string $date;\n\n    // getter/setter implementations removed for readability\n}\n\nclass Author\n{\n    private ?int $id = null;\n    private ?string $name = null;\n    private ?string $email = null;\n\n    // getter/setter implementations removed for readability\n}\n\nclass Comment\n{\n    private ?int $id = null;\n    private ?Author $author = null;\n    private ?string $text = null;\n\n    // getter/setter implementations removed for readability\n}\n\n\n')),(0,o.kt)("h2",{id:"formats"},"Formats"),(0,o.kt)("p",null,"The library supports different reader and writer classes to produce different\ndata formats. If you want to read a specific format you can provide the content\ntype of the data. I.e. if you want read XML you could use the following\npayload:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$payload = Payload::create($in, 'application/xml');\n")),(0,o.kt)("p",null,"The processor uses a reader factory to obtain the fitting reader for a specific\ncontent type. In this case it would use the XML reader. The reader factory can\nbe easily extended with different reader classes to support other data formats."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$configuration->getReaderFactory()->addReader(new Acme\\Reader(), 32);\n")),(0,o.kt)("p",null,"In order to produce a payload from an incoming HTTP request you simply have to\nset the body as data and the content type from the header. How you access this\ndata depends on the HTTP interface. For an PSR-7 request you could use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$payload = Payload::create(\n    (string) $request->getBody(),\n    $request->getHeaderLine('Content-Type')\n);\n")),(0,o.kt)("p",null,"On the other hand if you want to write data as response you would use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$payload = Payload::create(\n    $model,\n    $request->getHeaderLine('Accept')\n);\n")),(0,o.kt)("p",null,"The writer factory can also be extended with custom writer implementations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$configuration->getWriterFactory()->addWriter(new Acme\\Writer(), 64);\n")),(0,o.kt)("h2",{id:"constraints"},"Constraints"),(0,o.kt)("p",null,"It is also possible to add specific constraints to your model class. In the following some examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"#[Required(['title'])]\nclass News\n{\n    #[Pattern('[A-z]')]\n    private ?string $title = null;\n\n     #[MinLength(3)]\n     #[MaxLength(255)]\n    private ?string $text = null;\n\n    #[Enum(['active', 'deleted'])]\n    private ?string $status = null;\n\n    #[Minimum(0)]\n    #[Maximum(5)]\n    private ?int $rating = null;\n}\n")),(0,o.kt)("p",null,"All available attributes are located at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apioo/psx-schema"},"psx/schema")," project."),(0,o.kt)("h2",{id:"transformations"},"Transformations"),(0,o.kt)("p",null,"Each reader class returns the data in a form which can be easily processed. I.e.\nthe json reader returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"stdClass")," produced by ",(0,o.kt)("inlineCode",{parentName:"p"},"json_decode")," and the xml\nreader returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"DOMDocument"),". To unify the output we use transformation\nclasses which take the output of a reader and return a normalized format. I.e.\nfor xml content we apply by default the ",(0,o.kt)("inlineCode",{parentName:"p"},"XmlArray")," transformer which transforms\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"DOMDocument"),". So you can use a transformer if you directly want to work\nwith the output of the reader."),(0,o.kt)("p",null,"In case you want to validate incoming XML data after a XSD schema you could use\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"XmlValidator")," transformer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$payload = Payload::xml($data);\n$payload->setTransformer(new XmlValidator('path/to/schema.xsd'));\n\n$model = $processor->read(News::class, $payload);\n\n")),(0,o.kt)("h2",{id:"exporter"},"Exporter"),(0,o.kt)("p",null,"If you write data you can set as payload an arbitrary object. We use an exporter\nclass to return the actual data representation of that object. By default the\nexporter reads also the psx/schema attributes so you can use the same model for\nincoming and outgoing data. But it is also possible to use different classes.\nI.e. you could create model classes using the psx/schema attributes only for\nincoming data and for outgoing data you could use the JMS exporter in case you\nhave already objects which have these annotations."),(0,o.kt)("p",null,"If you have another way how to extract data of an object (i.e. a toArray\nmethod which returns the available fields of the object) you can easily write\na custom exporter."))}p.isMDXComponent=!0}}]);